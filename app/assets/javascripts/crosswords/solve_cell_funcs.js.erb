//Document load events and event triggers
$(function() {
  number_cells();
});

function highlight_clue_cell($clue) {
  var $cell = $(".cell[data-cell='" + $clue.attr('data-cell-num') + "']").first();
  select_across = $clue.closest('.clues').attr('id') == 'across';
  $cell.highlight();
}

//Keyboard Function triggered by

function crossword_keypress(e) {
  if (!(e.ctrlKey || e.altKey || e.metaKey)) {
    var key = e.which;

    switch (key) {
      case UP:
        if (selected && selected.cell_above()) {
          selected.cell_above().highlight();
        }
        break;
      case RIGHT:
        if (selected && selected.cell_to_right()) {
          selected.cell_to_right().highlight();
        }
        break;
      case DOWN:
        if (selected && selected.cell_below()) {
          selected.cell_below().highlight();
        }
        break;
      case LEFT:
        if (selected && selected.cell_to_left()) {
          selected.cell_to_left().highlight();
        }
        break;
      case TAB:
        unhighlight_all();
        break;
      case SHIFT:
        break;
      case DELETE:
        break;
      case SPACE:
        select_across = !select_across;
        $('.selected').highlight();
        break;
      default:
        if (selected) {
          var letter = String.fromCharCode(key);
          if (letter != selected.get_letter()) {
            var check_for_finish = selected.is_empty_cell();
            selected.set_letter(String.fromCharCode(key), true);
            if(check_for_finish){
              selected.check_finisheds();
            }
            solve_app.update_unsaved();
          }
          selected.next_empty_cell().highlight();
        }
    }
  }
}

//Prevents backspace from going to previous window, prevents arrow keys and space from moving around page
document.onkeydown = suppressBackspaceAndNav;
document.onkeypress = suppressBackspaceAndNav;

function suppressBackspaceAndNav(evt) {
  evt = evt || window.event;
  var target = evt.target || evt.srcElement;
  if (evt.keyCode == BACKSPACE && !/input|textarea/i.test(target.nodeName)) {
    var check_for_unfinish = !selected.is_empty_cell();
    selected.delete_letter(true);
    if(check_for_unfinish){
      selected.uncheck_unfinisheds();
    }
    return false;
  }
  if (_.contains(PAGE_NAV_KEYS, evt.keyCode) && !/input|textarea/i.test(target.nodeName)) {
    return false;
  }
}

//Key Constants for keyboard controls
var UP = 38;
var RIGHT = 39;
var DOWN = 40;
var LEFT = 37;
var COMMAND = 91;
var ENTER = 13;
var SPACE = 32;
var DELETE = 8;
var SHIFT = 16;
var TAB = 9;
var BACKSPACE = 8;
var PAGE_NAV_KEYS = [UP, RIGHT, DOWN, LEFT, SPACE];

//New jQuery functions for use specifically in solve cells
(function( $ ) {
  $.fn.delete_letter = function(original){
    if(this.is_empty_cell()){
      if(!this.is_word_start()){
        if(!this.previous_cell().is_empty_cell()){
          this.previous_cell().delete_letter(true);
          solve_app.update_unsaved();
        }
        this.previous_cell().highlight();
        return false;
      }
    } else {
      this.children('.letter').first().empty();
      if((typeof team_app != 'undefined')){
        if(original){
        team_app.send_team_cell(this, '');
        } else {
          this.uncheck_unfinisheds();
        }
      }
      solve_app.update_unsaved();
    }
  }
})( jQuery );

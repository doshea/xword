(function( $ ) {
  $.fn.delete_letter = function(letter){
    this.children('.letter').first().empty();

    var token = $('#crossword').data('auth-token');
    var cell_id = this.data('id');

    var settings = {
      dataType: 'script',
      type: 'PUT',
      url: '/cells/'+ cell_id,
      data: {
        authenticity_token: token,
        cell: {
          letter: ''
        }
      },
      error: function(){
        alert('Error toggling void!');
      }
    }
    $.ajax(settings);
  }

  $.fn.next_empty_cell = function(){
    if(this.is_last_letter()){
      console.log(selected);
      if(this.is_empty_cell()){
        console.log( edit_app.debug_mode ?  'Is empty cell': '' );
        return this;
      } else {
        console.log( edit_app.debug_mode ?  'highlighting next word': '' );
        highlight_next_word();
        if($('.selected').get_number() != 1){
          return $('.selected').is_empty_cell() ? $('.selected') : $('.selected').next_empty_cell();
        }
      }
    } else {
      var next = this.next_cell();
      return (next.is_empty_cell() ? next : next.next_empty_cell());
    }
  }
  $.fn.get_mirror_cell = function(){
    var $cells = $('.cell')
    var cell_count = $cells.length;
    var this_index = $.inArray(this[0], $cells);
    return $($cells[cell_count-this_index-1]);
  }
  $.fn.toggle_void = function(recursive){

    //Makes this cell void
    this.toggleClass('void');

    //if this cell was made void, hides its clues and shows any clues below and right
    if(this.hasClass('void')){
      this.corresponding_clues().hide();
      if(this.cell_below()){
        this.cell_below().corresponding_clues().filter('.down-clue').show();
      }
      if(this.cell_to_right()){
        this.cell_to_right().corresponding_clues().filter('.across-clue').show();
      }
    } else {
      //Otherwise, hides clues below and right and possibly shows this cell's clues
      if(this.cell_below()){
        this.cell_below().corresponding_clues().filter('.down-clue').hide();
      }
      if(this.cell_to_right()){
        this.cell_to_right().corresponding_clues().filter('.across-clue').hide();
      }
      if(!this.cell_above()){
        this.corresponding_clues().filter('.down-clue').show();
      }
      if(!this.cell_to_left()){
        this.corresponding_clues().filter('.across-clue').show();
      }
    }

    //Sends request to database to toggle void on the back end
    var token = $('#crossword').data('auth-token');
    var cell_id = this.data('id');
    var settings = {
      dataType: 'script',
      type: 'PUT',
      url: '/cells/'+ cell_id +'/toggle_void',
      data: {authenticity_token: token},
      error: function(){
        alert('Error toggling void!');
      }
    }
    $.ajax(settings);

    var mirror_cell = this.get_mirror_cell();
    //Does all the same for the mirror of this cell unless this cell is its own mirror
    if(recursive && (this[0] != mirror_cell[0])){
      mirror_cell.toggle_void(false);
      number_cells();
      if (this.hasClass('void')){
        this.next_cell().highlight();
      } else {
        this.highlight();
      }
    }

  }

})( jQuery );
//Document load events and event triggers
$(function() {
  // number_cells();
});

function highlight_clue_cell($clue) {
  var $cell = $(".cell[data-id='" + $clue.data('cell-id') + "']").first();
  select_across = $clue.closest('.clues').attr('id') == 'across';
  $cell.highlight();
  $clue.children('input').select();
}

//Keyboard Function triggered by
function crossword_keypress(e) {
  if (!(e.ctrlKey || e.altKey || e.metaKey) && (selected && ($(':focus').length == 0))) {
    var key = e.which;

    switch (key) {
      case UP:
        if (selected && selected.cell_above()) {
          selected.cell_above().highlight();
        }
        break;
      case RIGHT:
        if (selected && selected.cell_to_right()) {
          selected.cell_to_right().highlight();
        }
        break;
      case DOWN:
        if (selected && selected.cell_below()) {
          selected.cell_below().highlight();
        }
        break;
      case LEFT:
        if (selected && selected.cell_to_left()) {
          selected.cell_to_left().highlight();
        }
        break;
      case TAB:
        unhighlight_all();
        break;
      case SHIFT:
        break;
      case DELETE:
        break;
      case SPACE:
        select_across = !select_across;
        $('.selected').highlight();
        break;
      default:
        if (selected) {
          var letter = String.fromCharCode(key);
          if (letter != selected.get_letter()) {
            selected.set_letter(String.fromCharCode(key), true);
            edit_app.update_unsaved();
            var token = $('#crossword').data('auth-token');
            var cell_id = selected.data('id');

            var settings = {
              dataType: 'script',
              type: 'PUT',
              url: '/cells/'+ cell_id,
              data: {
                authenticity_token: token,
                cell: {
                  letter: letter
                }
              },
              error: function(){
                alert('Error toggling void!');
              }
            }
            $.ajax(settings);
          }
          if(selected.next_empty_cell){
            selected.next_empty_cell().highlight();
          }
        }
    }
  }
}

//Prevents backspace from going to previous window, prevents arrow keys and space from moving around page
document.onkeydown = suppressBackspaceAndNav;
document.onkeypress = suppressBackspaceAndNav;

function suppressBackspaceAndNav(evt) {
  if(selected){
    evt = evt || window.event;
    var target = evt.target || evt.srcElement;
    if (evt.keyCode == BACKSPACE && !/input|textarea/i.test(target.nodeName)) {
      selected.delete_letter();
      edit_app.update_unsaved();
      return false;
    }
    if (_.contains(PAGE_NAV_KEYS, evt.keyCode) && !/input|textarea/i.test(target.nodeName)) {
      return false;
    }
  }
}

//Key Constants for keyboard controls
var UP = 38;
var RIGHT = 39;
var DOWN = 40;
var LEFT = 37;
var COMMAND = 91;
var ENTER = 13;
var SPACE = 32;
var DELETE = 8;
var SHIFT = 16;
var TAB = 9;
var BACKSPACE = 8;
var PAGE_NAV_KEYS = [UP, RIGHT, DOWN, LEFT, SPACE];

(function( $ ) {
  $.fn.corresponding_clues = function(){return $(".clue[data-cell-id=" + this.data('id') + "]");}

  $.fn.delete_letter = function(letter){
    this.children('.letter').first().empty();

    var token = $('#crossword').data('auth-token');
    var cell_id = this.data('id');

    var settings = {
      dataType: 'script',
      type: 'PUT',
      url: '/cells/'+ cell_id,
      data: {
        authenticity_token: token,
        cell: {
          letter: ''
        }
      },
      error: function(){
        alert('Error toggling void!');
      }
    }
    $.ajax(settings);
  }

  $.fn.get_mirror_cell = function(){
    var $cells = $('.cell')
    var cell_count = $cells.length;
    var this_index = $.inArray(this[0], $cells);
    return $($cells[cell_count-this_index-1]);
  }
  $.fn.toggle_void = function(recursive){

    //Makes this cell void
    this.toggleClass('void');

    //if this cell was made void, hides its clues and shows any clues below and right
    if(this.hasClass('void')){
      this.corresponding_clues().hide();
      if(this.cell_below()){
        this.cell_below().corresponding_clues().filter('.down-clue').show();
      }
      if(this.cell_to_right()){
        this.cell_to_right().corresponding_clues().filter('.across-clue').show();
      }
    } else {
      //Otherwise, hides clues below and right and possibly shows this cell's clues
      if(this.cell_below()){
        this.cell_below().corresponding_clues().filter('.down-clue').hide();
      }
      if(this.cell_to_right()){
        this.cell_to_right().corresponding_clues().filter('.across-clue').hide();
      }
      if(!this.cell_above()){
        this.corresponding_clues().filter('.down-clue').show();
      }
      if(!this.cell_to_left()){
        this.corresponding_clues().filter('.across-clue').show();
      }
    }

    //Sends request to database to toggle void on the back end
    var token = $('#crossword').data('auth-token');
    var cell_id = this.data('id');
    var settings = {
      dataType: 'script',
      type: 'PUT',
      url: '/cells/'+ cell_id +'/toggle_void',
      data: {authenticity_token: token},
      error: function(){
        alert('Error toggling void!');
      }
    }
    $.ajax(settings);

    var mirror_cell = this.get_mirror_cell();
    //Does all the same for the mirror of this cell unless this cell is its own mirror
    if(recursive && (this[0] != mirror_cell[0])){
      mirror_cell.toggle_void(false);
      number_cells();
      if (this.hasClass('void')){
        this.next_cell().highlight();
      } else {
        this.highlight();
      }
    }

  }

})( jQuery );
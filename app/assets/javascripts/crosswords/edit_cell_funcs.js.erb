(function( $ ) {
  $.fn.get_row = function() {return this.data('row');};
  $.fn.get_col = function() {return this.data('col');};

  $.fn.in_top_row = function() {return $(this).get_row() == 1;};
  $.fn.in_bottom_row = function() {return this.get_row() == $('#crossword').data('rows');};
  $.fn.in_left_col = function() {return this.get_col() == 1;};
  $.fn.in_right_col = function() {return this.get_col() == $('#crossword').data('cols');};

  $.fn.has_above = function(){if(this.in_top_row()){return false;} else {var row = parseInt(this.get_row());var col = parseInt(this.get_col());var above = $(".cell[data-row='" + (row - 1) + "'][data-col='"+ col +"']");return !above.hasClass('void');}};
  $.fn.has_below = function(){if(this.in_bottom_row()){return false;} else {var row = parseInt(this.get_row());var col = parseInt(this.get_col());var below = $(".cell[data-row='" + (row + 1) + "'][data-col='"+ col +"']");return !below.hasClass('void');}};
  $.fn.has_left = function(){if(this.in_left_col()){return false;} else {var row = parseInt(this.get_row());var col = parseInt(this.get_col());var left = $(".cell[data-row='" + row + "'][data-col='"+ (col-1) +"']");return !left.hasClass('void');}};
  $.fn.has_right = function(){if(this.in_right_col()){return false;} else {var row = parseInt(this.get_row());var col = parseInt(this.get_col());var right = $(".cell[data-row='" + row + "'][data-col='"+ (col+1) +"']");return !right.hasClass('void');}};

  $.fn.cell_to_left = function() {return this.prevAll('.cell:not(.void)').first();};
  $.fn.cell_to_right = function() {return this.nextAll('.cell:not(.void)').first();};
  $.fn.cell_above = function() {if( this.in_top_row() ){return false;} else {var row = parseInt(this.get_row());var col = parseInt(this.get_col());var above = $(".cell[data-row='" + (row - 1) + "'][data-col='"+ col +"']");if(!above.hasClass('void')){return above;} else {return above.cell_above();}}};
  $.fn.cell_below = function() {if( this.in_bottom_row() ){return false;} else {var row = parseInt(this.get_row());var col = parseInt(this.get_col());var below = $(".cell[data-row='" + (row + 1) + "'][data-col='"+ col +"']");if (!below.hasClass('void')){return below;} else {return below.cell_below();}}};
  $.fn.next_cell = function(){ return select_across ? this.cell_to_right() : this.cell_below(); }

  $.fn.get_down_word_cells = function() {return this.get_down_start_cell().down_word_from_start();};
  $.fn.get_down_start_cell = function() {if( !this.has_above() ){return this;} else {return this.cell_above().get_down_start_cell();}};
  $.fn.down_word_from_start = function() {if( !this.has_below() ){return [this];} else {return [this].concat(this.cell_below().down_word_from_start());}};
  $.fn.get_down_word = function(){return $.map( this.get_down_word_cells(), function(el, i){return el.text();}).join('');};

  $.fn.get_across_word_cells = function() {return this.get_across_start_cell().across_word_from_start();};
  $.fn.get_across_start_cell = function() {if( !this.has_left() ){return this;} else {return this.cell_to_left().get_across_start_cell();}};
  $.fn.across_word_from_start = function() {if( !this.has_right() ){return [this];} else {return [this].concat(this.cell_to_right().across_word_from_start());}};
  $.fn.get_across_word = function(){return $.map( this.get_across_word_cells(), function(el, i){return el.text();}).join('');};

  $.fn.get_letter = function(){var letter = this.children('.letter').first().text(); return letter.length > 0 ? letter : ' '}
  $.fn.set_letter = function(letter){this.children('.letter').first().text(letter);}
  $.fn.delete_letter = function(letter){this.children('.letter').first().empty();}

  $.fn.get_number = function(){var letter = this.children('.cell_num').text(); return letter.length > 0 ? letter : ' '}
  $.fn.set_number = function(number){this.children('.cell_num').text(number);}

  $.fn.is_last_letter = function(){var word_cells = (select_across ?  this.get_across_word_cells() : this.get_down_word_cells()); var last_index = word_cells.length - 1; return this[0] == word_cells[last_index][0];}
  $.fn.is_empty_cell = function(){return ((this.get_letter() == '') || (this.get_letter() == ' '));}
  $.fn.next_empty_cell = function(){
    if(this.is_last_letter()){
      console.log(selected);
      if(this.is_empty_cell()){
        console.log( edit_app.debug_mode ?  'Is empty cell': '' );
        return this;
      } else {
        console.log( edit_app.debug_mode ?  'highlighting next word': '' );
        highlight_next_word();
        if($('.selected').get_number() != 1){
          return $('.selected').is_empty_cell() ? $('.selected') : $('.selected').next_empty_cell();
        }
      }
    } else {
      var next = this.next_cell();
      return (next.is_empty_cell() ? next : next.next_empty_cell());
    }
  }
  $.fn.corresponding_clue = function(){
    var dir = select_across ? '.across-clue' : '.down-clue';
    return $("" + dir + "[data-cell-id=" + this.data('id') + "]");
  }
  $.fn.corresponding_clues = function(){
    return $(".clue[data-cell-id=" + this.data('id') + "]");
  }
  $.fn.get_mirror_cell = function(){
    var $cells = $('.cell')
    var cell_count = $cells.length;
    var this_index = $.inArray(this[0], $cells);
    return $($cells[cell_count-this_index-1]);
  }
  $.fn.toggle_void = function(recursive){

    this.toggleClass('void');
    if(this.hasClass('void')){
      if(this.cell_below()){
        this.cell_below().corresponding_clues().filter('.down-clue').show();
      }
      if(this.cell_to_right()){
        this.cell_to_right().corresponding_clues().filter('.across-clue').show();
      }
    }
    else {
      if(this.cell_below()){
        this.cell_below().corresponding_clues().filter('.down-clue').hide();
      }
      if(this.cell_to_right()){
        this.cell_to_right().corresponding_clues().filter('.across-clue').hide();
      }
      if(!this.cell_above()){
        this.corresponding_clues().filter('.down-clue').show();
      }
      if(!this.cell_to_left()){
        this.corresponding_clues().filter('.across-clue').show();
      }
    }

    token = $('#crossword').data('auth-token');
    cell_id = this.data('id');
    settings = {
      dataType: 'script',
      type: 'PUT',
      url: '/cells/'+ cell_id +'/toggle_void',
      data: {authenticity_token: token},
      error: function(){
        alert('Error toggling void!');
      }
    }
    $.ajax(settings);

    if(recursive){
      this.get_mirror_cell().toggle_void(false);
      number_cells();
    }

  }

})( jQuery );